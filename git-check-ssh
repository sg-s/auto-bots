#!/usr/bin/env bash

# define parameters here
code_root=$HOME"/code/"
your_url_pattern[1]="sg-s"
your_url_pattern[2]="inscopix"

# check if we need to change to SSH automatically 
change_all=$(echo $1 | grep "change-all" | wc -l)

# show a list of folders that have dirty working directories
printf "\n"
echo "These repos use HTTPS instead of SSH:"
echo "-------------------------------------"

for dir in $code_root*/
do
    dir=${dir%*/}
    
    cd $code_root${dir##*/}
    if [ -d .git ]; then

    	# check if the remote URL has a string that might suggest that it's mine
     	rem_url=$(git config --get remote.origin.url)
     	goon=0

     	# iterate over all keywords
		n=${#your_url_pattern[@]}

		for (( c=1; c<=$n; c++ ))
		do 
			this_pattern=${your_url_pattern[$c]}
			M=$(echo $rem_url | grep $this_pattern | wc -l)
			if [ $M -gt 0 ]; then
				goon=1
			fi;
		done

		if [ $goon -gt 0 ]; then
			# it's a personal repo

			# check if the remote URL uses http instead of SSH
			mod=$(echo $rem_url | grep "https:" | wc -l)
			if [ $mod -gt 0 ]; then
				# it uses HTTPS
				new_url="${rem_url/https:\/\//git@}"
				new_url="${new_url/.com\//.com:}"
				# remove trailing slash, if any
				new_url=${new_url%/}
				# make sure it ends with .git
				new_url=${new_url%.git}
				new_url=$new_url.git
				echo $code_root${dir##*/} " : " $rem_url" â†’ "$new_url
				if [ $change_all -gt 0 ]; then
					git remote set-url origin $new_url
				fi;
				
			fi;	
		fi; 
	fi;
done
